#!/usr/bin/env python3

import logging
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackContext,
)
from utils.schedule_manager import schedule_manager
from dotenv import load_dotenv
import os

load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)


async def start_command(update: Update, context: CallbackContext) -> None:
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n"
        f"–Ø WISEACRE ‚Äî –±–æ—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.\n"
        f"–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –Ω–∞–ø–∏—à–∏:\n"
        f"/raspisanie –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 15.12.2025'"
    )


async def help_command(update: Update, context: CallbackContext) -> None:
    help_text = (
        "üìò –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/raspisanie ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "–ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ 15.12.2025"
    )
    await update.message.reply_text(help_text)


async def schedule_command(update: Update, context: CallbackContext) -> None:
    user_input = context.args
    if not user_input:
        message = schedule_manager.get_today_schedule()
    else:
        date_str = user_input[0]
        message = schedule_manager.get_schedule_for_date(date_str)
    await update.message.reply_text(message)


async def schedule_text(update: Update, context: CallbackContext) -> None:
    """–†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ —Å–ª–æ–≤–æ '—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ'"""
    text = update.message.text.lower().strip()
    if text.startswith("—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"):
        parts = text.split()
        if len(parts) == 2:
            message = schedule_manager.get_schedule_for_date(parts[1])
        else:
            message = schedule_manager.get_today_schedule()
        await update.message.reply_text(message)


def main():
    if not TOKEN:
        raise ValueError("‚ùå –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω! –£–∫–∞–∂–∏ BOT_TOKEN –≤ .env")

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("raspisanie", schedule_command))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, schedule_text))

    print("ü§ñ –ë–æ—Ç WISEACRE –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    main()
